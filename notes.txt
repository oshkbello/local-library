Installing node.js
use intaller provided by nodejs.org by selecting the OS you are working from 
create an empty project folder
  open cmd and navigate to project folder 
  type npm init to initialize nodejs on the project folder

from Node perspective, express is just another package that you need to install 
using NPM and then require in your code.

Package.json is used to manage dependencies. It lists all the dependencies for a 
specific Javascript package. It should contain everything NPM needs to fetch and run
your application.

Use `npm init` to create a package.json file
Use `npm install express` to install express. This also automatically adds the dependencies section
in the package.json file
import the express module using require('express')

if a dependency is only used during development, you should instead save it as a 
"development dependcy" in the package.json file.

SideNote: Linters are tools that perform static analysis on software in order to recognise and report
adherence/non-adherence to some set of coding best practice
Use `npm install eslint --save-dev` to install linter. It will be entered to the devDependencies section 
of package.json

Named script can be defined in the package,json file and npm call is used to execute them with the cmd `npm run-script {script_name}`.
this appraoch is commonly used to automate running tests.


INSTALLING THE EXPRESS APPLICATION GENERATOR
the EAG tool generates an express applicaiton skeleton. 
Use `npm install express-generator -g` the -g flag installs it globally. So you can call it anywhere

To create an express app with the EAG tool. navigate to where you want your app and 
Use `express {name_of_app}`

SideNote: I couldnt run the script above because I turned off running scripts in windows. To enable this is 
I opened up powershell as admin and ran the cmd `set-executionpolicy remotesigned`.

after creating the new express app, ensure to install your dependencies.
navigate into the new app folder and run `npm install`

# Run helloworld on Windows with PowerShell
SET DEBUG=helloworld:* | npm start

use the web to access your new express app @ http://127.0.0.1:3000/

you can also start the express application by using `npm start`

INSTALLING NODEMON
used to restart the server on file changes.
tips: install locally on developer dependcy, so the entire team has access to it in the project
use `npm install --save-dev nodemon`

if you choose to install it as a developer dependcy, you will not be able to run it from the cmd line.
We can fix this, by calling it as a script created in the scripts section of package.json.
  "scripts": {
    "start": "node ./bin/www",
    "devstart":"nodemon ./bin/www",
    "serverstart":"DEBUG=local-library:* npm run devstart"
  }
restart your server using this cmd
  SET DEBUG=local-library:* npm run devstart {use this for windows powershell}
or `npm run devstart`

NOTE: to run scripts added to the package.json file use `npm run <scriptname>`

USING DATABASE (mongoose)
express can use any database supported by node.
when choosing a db consider:
  time-to-productivity
  learning-curve
  performance
  ease of replication/backup
  cost
  community support

Best way to interact with a db:
  using database native query (SQL)
  using object data model (ODM) or Object relational Model (ORM): an ODM/ORM represents the website's data
  as JS objects, which ar then mapped to the underlying database. 
best performance is achieved by using SQL or any other native query.
benefits of ORM is developers can work indepent of database. Can also perform data validation.
Using ORM results in lower costs for developement and maintenance. 

There are several ORM solutions to select from on the NPM package manager site. 
when selecting a solution, consider both the features provided and the community activity 
Mongoose is the ORM solution used in the project and it uses MongoDB

Mongose acts as a front end to MongoDB, an open source NoSQL db that uses document-oriented data model.
a collection of documents in a MongoDB database is samthing as a table of rows in a relational db.

Tips:
before coding your models, take time to think about the type of data used in your app and their relation.

Mongose Primer
installing mongoose and MongoDB
  `npm install mongoose`
  installing mongoose adds all its dependencies including the MongoDB database driver. but does not install mongoDB itself.

Defining and creating models:
models are defined using the schema interface.
schema allows to define the fields stored in each document along with their validation requirements and default values.
you can define static and instance helper methods, and virtual properties(virtual properties arent stored in database).
schema are compiled into models using the mongose.model() method.
each model maps to a collection of documents in the mongoDB. the documents will contain the field/schema types defined 
in the model schema.

defining schemas
  Require mongoose
  `let mongoose = require('mongoose')`

  deine a schema using schema constructor
  `let Schema = mongoose.Schema`

  declare fields and datatypes in your new schema
  `let SomeModelSchema = new Schema({
    a_string: String,
    a_Date: Date
  })`

creating a model:
  Define schema as done above

  compile model from schema
  `let SomeModel = mongoose.model('SomeModel', SomeModelSchema)`
first argument of the mongoose.model() is the singular name of the collection that will be created for your model.
  mongoose will create the database collection for the new model
second argument is the schema you want to use in creating the model.

Schema Types:
schemas can have arbitrary number of fields.
Each field represents a field in the documents stored in MongoDB.
some schemaTypes are:
  ObjectId: represents specific instances of a model in the db.
  Mixed: an arbitrary schema type
  []: an array of items. Javascript array operations can be performed on these types.

Validation:
Mongoose provides built-in and custom validators, and synchronous and asynchronous validators.
it allows you to specify both the acceptable range of values and the error msg for validation failure.
Built-in validators include:
  required validator. used to specify whether the field must be supplied or not
  Numbers. have mind and max validators
  string:
    enum: specifies the set of allowed values for the field
    match: specifies a regular expression that the string must match
    maxlength and minlength for the string

Virtual properties:
these are document properties that u can get and set but do not get save to mongoDB.
the getters are useful for formatting or combining fields
the setters are useful for de-composing a single value into multiple values for stroage.

Methods and query helpers:
Schema can have instance methods, static methods, and query helpers.
an instance method is associated with a particular record and has access to the current object.
Query helpers allows for extending mongoose chainable query builder API.

Using models:
the model represents a collection of documents in the db that u can search,
while the model's instances represent individual documents that u can save and retrieve.

Creating and modifying documents:
to create a record you cand efine an instance of the model and then call save()
  `let awesome_instance = new SomeModel({ name: 'aweomse' })`

  `awesome_instance.save(function (err) {
    if (err) return handleError(err)
  })`
creation and modification of records are asynchronous operations--you supply a callback that is called when
the operation completes. 
The API uses the error-first argument convention. if the API returns some result, this will be the second argument.

you can also use create() to define the model instance at thesame time as you save it.
  `SomeModel.create({ name: 'also_awesome' }, function (err, awesome_instance) {
    if (err) return handleError(err)
  })`
You can access fields in new record using the dot notation, and also change the values.
  `awesome_instance.name="New cool name"`
  `awesome_instance.save(function (err) {
    if (err) return handleError(err)
  })`

USING ROUTES
route is a section of express code that associates an HTTP verb, a url path/pattern and a function that is called
to handle that pattern. 

use `express.Router` middleware to group the route handlers for a specifice part of a site together,
and a access them using a common route-prefix. 

defining separate route modules:
  `const express = require('express)`

  `const router = express.Router()`

  sample page route:
  router.get('/', function (req, res) {
    res.send('Yohoo, sample route!')
  })
to use the router module in the main app, you need to require the newly create route file 
  `const sampleRoute = require('FILE_LOCATION/file_name')`

  `app.use('url_path_of_sampleRoute', sampleRoute)`
the callback takes 3 args (req, res, next) that will contain http request object, response and next function in
the middleware chain.

NOTE:
  because router functions are express middleware, they must either complete (respond to) the 
  request or call the next function in the chain.
  with router function you can specify as many callback args as needed or an array of callback functions.
  each function is a part of the middleware chain and will be called in the order it is added

Route paths:
it defines the endpoints at which requests can be made. 
route paths can also be string patterns. string patterns use a fprm of regular expression syntax to define patterns
of endpoints that will be matched. 
  ?: the endpoint must have 0 or 1 of the preceeding character
  +: the endpoint must have 1 or more of the preceeding character
  *: the endpoint mayb have an arbitrary string where the * character is placed.
  (): grouping match on a set of characters to perform another operation on.

Route parameters:
these are named url segments used to capture values at specific positions in the url.
named segments are prefixed with a colon and then the name.
the captured values are stored in the `req.params` object using the parameter name as a keys (req.params.parameter_name)
  example:
  given a url http://localhost:3000/users/34/books/8989 we can extract the userId and bookId like so
    app.get('/users/:userId/books/:bookId', function (req, res) {
     ` //get userId via: req.params.userId
      //get bookId via: req.params.bookId
      res.send(re.params)
    })`
express allows you to construct URLs anyway you like. you can encode information in the body of the URL or use URL get params
